== Presentation

Dynamic attributes are stored as 'key' = 'value' in an external table. They are accessed either by the proxy 'dyn' or with the 'd_' syntax :

 record.dyn['life'] = 'fun'
 record.save
 record.dyn['life']  # ===> 'fun'
 
 or
 
 record.d_life       # ===> 'fun'
 record.save
 record.d_bad        # ===> nil

The prefered syntax is through dyn[...] because it does not use 'method_missing'. However when setting attributes from a form, the 'd_' syntax has to be used :

  record.update_attributes(:name=>'john', :d_bio=>'John Lennon was a ...')

Empty values ('') are considered as nil. So if you set dyn['life'] = '', you are actually doing the same as dyn.delete('life') or dyn['life'] = nil.

If you want to protect the dynamic attributes allowed for a specific class, you can use

  class Person < ActiveRecord::Base
    uses_dynamic_attributes :only => [:bio, :phone, :email]
  end

You can also change the table name with :table_name :

  class Houses < ActiveRecord::Base
    uses_dynamic_attributes :table_name => 'super_attributes'
  end

The same table can be used for different classes without problem.

== Install

Drop the folder into vendor/plugins

=== Database setup
In order for DynAttributes to work, you need to create a table for the 'key', 'value' pairs. Here is a migration that does the trick:

  class AddDynAttributes < ActiveRecord::Migration
    def self.up
      create_table('dyn_attributes', :options => 'type=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci') do |t|
        t.column 'owner_id', :integer
        t.column 'owner_table', :string
        t.column 'key', :string
        t.column 'value', :text
      end
      add_index 'dyn_attributes', 'owner_id'
      add_index 'dyn_attributes', 'owner_table'
    end
  
    def self.down
      remove_index 'dyn_attributes', 'owner_id'
      remove_index 'dyn_attributes', 'owner_table'
      drop_table 'dyn_attributes'
    end
  end
  
== Test
The tests are part of zena : http://svn.zenadmin.org/zena/trunk/test/unit/dyn_attributes_test.rb